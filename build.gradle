buildscript {
    ext {
        springBootVersion = '1.2.1.RELEASE'
        cassandraDriverVersion = "2.1.4"
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("com.datastax.cassandra:cassandra-driver-core:${cassandraDriverVersion}")
    }
}

apply plugin: 'java'
apply plugin: 'scala'
apply plugin: 'spring-boot'
apply plugin: 'idea'

import com.datastax.driver.core.*;

task buildSchema << {
    Cluster cluster = Cluster.builder().addContactPoint("localhost").build()
    Session session = cluster.connect()

    new File("src/main/resources/schema/tables.cql").eachLine { line ->
        println("Executing $line")
        session.execute(line)
    }
}

task dropSchema << {
    Cluster cluster = Cluster.builder().addContactPoint("localhost").build()
    Session session = cluster.connect("killrauction")
    session.execute("drop keyspace killrauction")
}

jar {
    baseName = 'killraction-server'
    version = '0.0.1-SNAPSHOT'
}
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
    maven {
        url "http://oss.jfrog.org/artifactory/oss-release-local"
    }
    maven {
        url "http://repo.springsource.org/snapshot"
    }
}

project.ext.cucumberVersion = "1.2.2"
project.ext.apacheHttpVersion = "4.4"
project.ext.cassandraDriverVersion = "2.1.5"
project.ext.gatlingVersion = "2.1.4"

dependencies {
    compile("org.springframework.boot:spring-boot-starter-jersey")
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.springframework.boot:spring-boot-starter-security")
    compile("org.springframework.boot:spring-boot-starter-remote-shell")
    compile("org.springframework.boot:spring-boot-starter-actuator")
    compile("org.springframework.boot:spring-boot-starter-websocket")
    //compile("org.springframework:spring-websocket:4.2.0.BUILD-SNAPSHOT")
    compile("org.springframework:spring-messaging")
//    compile("org.springframework:spring-websocket")
//    compile("org.springframework:spring-messaging")
    compile("com.datastax.cassandra:cassandra-driver-core:${cassandraDriverVersion}")
    compile("com.datastax.cassandra:cassandra-driver-mapping:${cassandraDriverVersion}")
    compile("io.dropwizard.metrics:metrics-core:3.1.0")
    compile("io.dropwizard.metrics:metrics-graphite:3.1.0")
    compile("com.ryantenney.metrics:metrics-spring:3.0.4")
    compile("com.mangofactory:swagger-springmvc:0.9.5")
    compile("org.ajar:swagger-spring-mvc-ui:0.4")
    compile('io.reactivex:rxjava:1.0.8')

    // unit + acceptance testing
    testCompile("org.springframework.boot:spring-boot-starter-test")
    testCompile("info.cukes:cucumber-junit:${cucumberVersion}")
    testCompile("info.cukes:cucumber-spring:${cucumberVersion}")
    testCompile("org.apache.httpcomponents:httpclient:${apacheHttpVersion}")
    testCompile("org.apache.httpcomponents:fluent-hc:${apacheHttpVersion}")

    // for performance testing
    testCompile "org.scala-lang:scala-library:2.11.5"
    testCompile "io.gatling:gatling-app:${gatlingVersion}"
    testCompile "io.gatling.highcharts:gatling-charts-highcharts:${gatlingVersion}"
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.3'
}

sourceSets {
    e2eTest {
        java {
            srcDir 'src/e2etest/java'
        }
        resources {
            srcDir 'src/e2etest/resources'
        }
        compileClasspath += sourceSets.main.runtimeClasspath
        compileClasspath += sourceSets.test.compileClasspath
    }
}

task e2eTest(type: Test) {
    description = "Runs End to End Tests"
    testClassesDir = sourceSets.e2eTest.output.classesDir
    classpath += sourceSets.e2eTest.runtimeClasspath
}

idea {
    module {
        //and some extra test source dirs
        testSourceDirs += file('src/e2etest/java')
        testSourceDirs += file('src/e2etest/resources')
    }
}
//
task setupTestData(type: JavaExec) {
    description = 'Create test users'
    classpath = sourceSets.main.runtimeClasspath + sourceSets.test.runtimeClasspath + sourceSets.e2eTest.runtimeClasspath

    jvmArgs = [ '-Dgatling.core.directory.binaries=./build/classes/e2eTest' ]
    // Gatling application
    main = "io.gatling.app.Gatling"
    // Specify the simulation to run
    args = Eval.me("['-s', 'info.batey.killrauction.UserServiceSimulation']")
}

task runLoadTest(type: JavaExec) {
    description = 'Test full workflow with load'
    classpath = sourceSets.main.runtimeClasspath + sourceSets.test.runtimeClasspath + sourceSets.e2eTest.runtimeClasspath

    jvmArgs = [ '-Dgatling.core.directory.binaries=./build/classes/e2eTest' ]
    // Gatling application
    main = "io.gatling.app.Gatling"
    // Specify the simulation to run
    args = Eval.me("['-s', 'info.batey.killrauction.FullWorkloadSimulation']")
}


check.dependsOn e2eTest
check.dependsOn runLoadTest


